package ${pkgPath};

import org.apache.commons.lang3.StringUtils;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import com.mdks.common.base.BaseController;
import com.mdks.common.pojo.JsonEntity;
import com.mdks.common.pojo.PageEntity;
import com.mdks.common.utils.UtilsUUID;
import com.mdks.common.utils.reflection.ReflectionUtils;
import ${beanPath};
import ${servicePath};

/**
 * @ClassName: ${className}Controller
 * @Description:${moduleNameCN}控制层
 * @author: ${author}
 */
@Controller
@RequestMapping("/after/${lflClassName}")
public class ${className}Controller extends BaseController {

    @Resource
	private I${className}Service ${lflClassName}Service;
	
    /** 
     *${moduleNameCN}分页列表数据
	 * @Title: list
	 * @Description: 分页获取${moduleNameCN}列表数据
	 */
	@RequestMapping("/list")
	public String list(Model model, PageEntity page){
		page.setWhereParameters(getParams());
		model.addAttribute("page", page);
		model.addAttribute("list", ${lflClassName}Service.findList(page.getWhereParameters()));
		return "after/${lflClassName}/list";
	}
	
   /** 
     *${moduleNameCN}列表数据
	 * @Title: list
	 * @Description: 获取${moduleNameCN}列表数据
	 */
	@RequestMapping("/loadlist")
	public String loadList(Model model,${className} ${lflClassName}){
		model.addAttribute("list", ${lflClassName}Service.queryList(${lflClassName}));
		return "after/${lflClassName}/loadlist";
	}
	
	/**
	 * ${moduleNameCN}表单
	 * @Title: add
	 * @Description:
	 */
	@RequestMapping("/add")
	public String add(Model model) {
	    model.addAllAttributes(getParams());
		return "after/${lflClassName}/edit";
	}

	/**
	 * 更具ID获取${moduleNameCN}信息
	 * @Title: edit
	 * @Description:
	 */
	@RequestMapping("/edit/{id}")
	public String edit(Model model, @PathVariable(value="id") String ${beanPK}) {
		model.addAttribute("obj", ${lflClassName}Service.findObjectById(${beanPK}));
		return "after/${lflClassName}/edit";
	}

	/**
	 * 保存${moduleNameCN}
	 * @Title: saveOrUpdate
	 * @Description:
	 */
	@RequestMapping("/save")
	@ResponseBody
	public JsonEntity saveOrUpdate(${className} ${lflClassName}) {
		JsonEntity js = new JsonEntity();
		if (!ValidateEntity(${lflClassName}, js)) {
			return js;
		}
		if (StringUtils.isEmpty(${lflClassName}.get${uflBeanPK}())) {
		    ${lflClassName}.set${uflBeanPK}(UtilsUUID.getUUID());
			js.setCode(${lflClassName}Service.insert(${lflClassName}));
		} else {
			js.setCode(${lflClassName}Service.update(${lflClassName}));
		}
		return js;
	}

	/**
	 * 删除${moduleNameCN}
	 * @Title: delete${className}
	 * @Description:
	 */
	@RequestMapping("/del")
	@ResponseBody
	public JsonEntity delete(String ${beanPK}) {
		if (StringUtils.isEmpty(${beanPK})) {
			throw new RuntimeException("参数不能为空");
		}
		return new JsonEntity(${lflClassName}Service.delete(${beanPK}.split("[`]")));
	}
	
	/**
	 * 通用ajax校验
	 * @Description:
	 * @Title: validate
	 * @author: sunshine 
	 */
	@RequestMapping("/validate")
	@ResponseBody
    public JsonEntity validate(${className} ${lflClassName},String fieldId,String fieldValue, String old_field,HttpServletRequest request,HttpServletResponse response){
		JsonEntity je= new JsonEntity();
		je.setData(fieldId);
	if (StringUtils.isEmpty(old_field) || !old_field.equals(fieldValue)){
		ReflectionUtils.setFieldValue(${lflClassName}, fieldId, fieldValue);
		int ct=${lflClassName}Service.validate(${lflClassName});
		if(ct!=0){
			je.setStatus(JsonEntity.fail);
		}
    }
		return je;
	}
}
